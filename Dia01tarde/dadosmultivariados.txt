\subsubsection{Modificando linhas, colunas e nomes}

A notação de matriz é útil para modificar blocos de linhas em um data frame.

<<CodeS405, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

library(UsingR)
d = Cars93[1:3,1:4]
d[1,1] = d[3,4] = NA
d
@

Observe que o objeto $d$ acima é composto por quatro colunas, sendo três delas recebendo \emph{Factors}. Observe abaixo:

<<CodeS406, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

str(d)

@

Assim, se quisermos, por exemplo, adicionar uma linha precisamos primeiro criar os \emph{levels} para o \emph{Factor} envolvido:

<<CodeS407, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

levels(d$Model) = c(levels(d$Model), c('A3', 'A4', 'A6'))
d[4,] = list('Audi', 'A4', 'Midsize', 35)
d
@

Uma outra forma de adicionar uma linha, por suposto, é com a função \texttt{rbind}:

<<CodeS408, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

d = rbind(d, list('Audi', 'A6', 'Large', 45))
d
@

Adicionar uma coluna pode ser feito da seguinte forma:

<<CodeS409, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

d[,5] = d$Min.Price*1.3 # Preço em Euro
d
@

Ou, de forma a nomear a coluna:

<<CodeS410, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

d = d[,-5]
d$Min.Price.Euro = d$Min.Price*1.3
d
@

Podemos colocar todos os nomes em minúsculo com o código abaixo:

<<CodeS411, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

names(d) = tolower(names(d))
d
@

E podemos modificar o nome de uma coluna como abaixo:

<<CodeS412, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

names(d)[3] = 'car type'
d
@

\subsubsection{A função \texttt{subset}}

Como vimos acima, podemos extrair blocos de um data frame especificando as linhas e colunas do mesmo. Isso, entretanto, pode ser complicado se o seu data frame possuir muitas linhas e colunas. Um modo mais interessante de fazê-lo pode ser utilizando a função \texttt{subset} como abaixo:

<<CodeS413, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

aq = airquality[1:5,]
aq
subset(aq, select=Ozone:Wind)
subset(aq, select=-c(Month,Day))
subset(aq, subset=!is.na(Ozone), select=Ozone:Wind)
@

\subsubsection{is.na, complete.cases}

Quando estamos extraindo dados de um data frame, pode ser interessante ignorar linhas com NA. Observe abaixo:

<<CodeS414, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

DF = data.frame(a=c(NA,1,2), b=c('one', NA, 'three'))
DF
subset(DF, !is.na(a))
subset(DF, complete.cases(DF))
@

\subsubsection{Transformando valores}

Em geral, a maioria das funções no R são \emph{funções puras} no sentido de que elas não modificam os argumentos passados para elas. A integridade dos dados é respeitada dentro do ambiente R, de modo que modificações inesperadas são evitadas. Em alguns momentos, entretanto, alguma transformação dos dados pode ser importante para o analista. Vimos acima um exemplo com a taxa de câmbio. Abaixo uma outra forma de fazer essa mudança com a função \texttt{within}. 

<<CodeS415, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

d = within(d, {min.price.euro = min.price*1.5})
d

@

Também é possível utilizar a função \texttt{transform} como abaixo.

<<CodeS416, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

d = transform(d, min.price.euro = min.price*1.5)
d

@

\subsubsection{Reshaping}

Dados podem ser apresentados em um formato amplo. Por exemplo, podemos ter um conjunto de dados da seguinte forma:

<<CodeS417, eval=T, echo=F, results='hide',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

speed = matrix(NA, nrow=20, ncol=5)
for(i in 1:5){
  speed[,i] = morley$Speed[morley$Expt==i]
}
speed = as.data.frame(speed)
names(speed) = c('Speed.1', 'Speed.2', 'Speed.3',
                 'Speed.4', 'Speed.5')

@

<<CodeS418, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

head(speed)

@

Os dados acima são extraídos do conjunto de dados \texttt{morley}, que possui dados sobre um experimento com a velocidade da luz.\footnote{Você pode consultar as informações desse \texttt{data set} com ?morley.} \textbf{Dados amplos}, onde diferentes medidas de algum valor são arquivados como variáveis separadas, é comumente utilizado para visualização de dados. Entretanto, \textbf{dados longos} onde diferentes valores são arquivados com fatores é mais útil para uso com funções do R. Desse modo, fazer a conversão entre uma e outra forma é conhecido como \emph{reshaping} dos dados. Abaixo um exemplo.

<<CodeS419, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

m = reshape(speed, varying = names(speed)[1:5], direction = 'long')
head(m)
@


\subsection{Aplicando uma função sobre uma coleção}

Nós nos voltamos agora para construções no R que objetivam aplicar uma função sobre um grupo formado para algum processo de \emph{splitting}. 
Vimos anteriormente que algumas funções no R são \emph{vetorizadas}. Por exemplo:

<<CodeS420, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

x = 1:5
x - 3

@

Uma outra forma de fazer a mesma operação segue abaixo.

<<CodeS421, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

x = 1:5
res = integer(length(x))
for(i in 1:length(x)){
  res[i] = x[i] - 3
}
res

@

O código acima faz uma iteração sobre um conjunto de números que são os índices de $x$ e usa esse \emph{index} para verificar o correspondente valor de $x$ de modo a conseguir subtrair 3 das mesmas. Esse tipo de iteração sobre um conjunto ou coleção de elementos usando um loop \texttt{for} é elguns momentos desejável. 

Se uma função não é vetorizada, a função \texttt{Vectorize} irá fazê-lo. Veja um exemplo abaixo.

<<CodeS422, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

vmedian = Vectorize(median)
vmedian(homedata)

@

\subsubsection{Map}

Vetorização é um exemplo de \emph{map}. Um \emph{map} toma uma função $f$ e aplica a mesma sobre cada elemento de uma coleção, retornando uma nova coleção. Abaixo um exemplo.

<<CodeS423, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

collection = c(4,9,16)
Map(sqrt, collection)


@

\subsubsection{A função \texttt{sapply}}

A função \texttt{sapply} é um exemplo de \texttt{simplify2array}, um processo de fazer o trabalho de combinar o \emph{output} de uma forma aprazível. A chamada da função \texttt{sapply} é o inverso da que vimos a função \texttt{Map} acima. 

<<CodeS424, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

sapply(collection, sqrt)

@

Na sequência, nós \emph{splitamos} um conjunto de dados por um fator de modo a obter uma lista. Depois, nós aplicamos a função da média a cada uma. 

<<CodeS425, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

lst = with(ToothGrowth, split(len, supp))
sapply(lst, mean)

@

\subsubsection{A função \texttt{tapply}}

Uma forma de fazer a mesma coisa acima, de forma particular:

<<CodeS426, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

with(ToothGrowth, tapply(len, supp, mean))

@

\subsubsection{A função \texttt{aggregate}}

A função \texttt{aggregate} é uma função alternativa que provê uma interface para fórmulas. Uma sintaxe mais conveniente do que aquela proposta pela função \texttt{with}. Veja abaixo um exemplo.

<<CodeS427, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

aggregate(len~supp, data=ToothGrowth, mean)

@

\subsubsection{A função \texttt{apply}}

Para matrizes (ou \emph{arrays}), funções vetorizadas são aplicadas a cada elemento, tratando a matriz como um vetor com alguns atributos de forma. Por exemplo,

<<CodeS428, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

m = rbind(c(1,2), c(3,4))
m
sqrt(m)

@

Pode ser desejável, entretanto, aplicar a função à cada coluna, como em um data frame. Ou, como as linhas de uma matriz são do mesmo tipo, pode ser interessante aplicar uma função a cada linha. Vamos ilustrar alguns exemplos abaixo.

<<CodeS429, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

m = replicate(5, rnorm(3))
m
rowSums(m) # Soma as linhas
colSums(m) # Soma as colunas

@

Como a matriz $m$ é tratada como um vetor quando vista como uma coleção, a função \texttt{sapply} não funciona para esse tipo de tarefa.

<<CodeS430, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

sapply(m, sum)

@

Dado que precisamos aplicar a função a uma dimensão específica, precisaremos de uma outra forma. Veja abaixo.

<<CodeS431, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

apply(m, 1, mean) # um rowMeans alternativo
apply(m, 2, mean) # um colMeans alternativo

@

\subsubsection{A função \texttt{mapply}}

Mostramos até aqui funções que tomam uma única variável e mostram algum \emph{output}. Há funções, entretanto, que tomam duas ou mais variáveis. Veja um exemplo abaixo.

<<CodeS432, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

min(c(1,3), c(2,3))
mapply(min, c(1,4), c(2,3))

@

\subsubsection{A função \texttt{do.call}}

<<CodeS433, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

body = Animals$body; brain = Animals$brain
do.call(cor, Map(rank, list(body, brain)))
do.call(cor, Map(rank, setNames(Animals, NULL)))

@

\subsubsection{A função \texttt{Filter}}

Outro conceito bastante útil é filtrar ou extrair elementos de uma coleção. Por exemplo,

<<CodeS434, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

m = Cars93[1:2, 1:15]
Filter(is.factor, m)

@

\subsection{Dados externos}

Para terminar essa seção, fazemos uma breve descrição sobre como importar dados para o R. A fonte mais comum de dados está disponível em planilhas, do tipo EXCEL. Abaixo uma forma de importá-las e tratá-las, de modo a obter um \emph{dado limpo}.

<<CodeS435, eval=T, echo=T, results='markup',  fig.width=8, fig.height=4, fig.align='center', out.width=".75\\linewidth", warning=FALSE, message=FALSE,size='footnotesize'>>=

library(XLConnect)
url1 = 'http://www.anp.gov.br/images/Precos/Mensal2001-2012/Brasil.xlsx'
temp = tempfile()
download.file(url1, destfile=temp, mode='wb')
data1 = loadWorkbook(temp)
url2 = 'http://www.anp.gov.br/images/Precos/Mensal2013/MENSAL_BRASIL-DESDE_Jan2013.xlsx'
temp = tempfile()
download.file(url2, destfile=temp, mode='wb')
data2 = loadWorkbook(temp)
tabela1 = readWorksheet(data1, sheet = 1, header = TRUE, startRow = 13)
gasolina1 = tabela1$PRECO.MÉDIO.DISTRIBUIÇÃO[tabela1$PRODUTO=='GASOLINA COMUM']
tabela2 = readWorksheet(data2, sheet = 1, header = TRUE, startRow = 15)
gasolina2 = tabela2$PREÇO.MÉDIO.DISTRIBUIÇÃO[tabela2$PRODUTO=='GASOLINA COMUM']
gasolina = ts(c(gasolina1, gasolina2), start=c(2001,07), freq=12)
@



